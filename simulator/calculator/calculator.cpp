#include "calculator.h"
#include "ui_mainwindow.h"



Calculator::Calculator(QObject* parent) : QThread(parent) {
	QObject::connect(
		MainWindow::ui().startPushButton,
		SIGNAL(clicked()),
		SLOT(startStop())
	);

	QObject::connect(
		this,
		SIGNAL(newPlot(QString, double, double)),
		&MainWindow::instance(),
		SLOT(plotAdd(QString, double, double))
	);


	QObject::connect(
		this,
		SIGNAL(started()),
		this,
		SLOT(startUI())
	);
	QObject::connect(
		this,
		SIGNAL(finished()),
		this,
		SLOT(stopUI())
	);

	_isStop = false;
}

Calculator::~Calculator() {
	_isStop = true;
	wait(CALCULATOR_CLOSE_WAIT_TIME_MS);
}

Calculator& Calculator::instance() {
	static Calculator instance;
	return instance;
}

void Calculator::run() {
	while(1) {
		//qDebug() << timeAt << dtAt << timeAl << dtAl;
		if( timeAt <= timeAl && timeAl < timeAt+dtAt ) {
			updateAlgorythm();
			timeAl+=dtAl;
		}
		timeAt+=dtAt;

		// debug
		emit newPlot("mx", timeAt, Mx);
		emit newPlot("my", timeAt, My);
		emit newPlot("mz", timeAt, Mz);
		//qDebug() << "M" << Mx << My << Mz;
		emit newPlot("wx", timeAt, wx);
		emit newPlot("wy", timeAt, wy);
		emit newPlot("wz", timeAt, wz);
		//qDebug() << "w" << wx << wy << wz;
		emit newPlot("psi", timeAt, psi/M_PI*180.0);
		emit newPlot("theta", timeAt, theta/M_PI*180.0);
		emit newPlot("gamma", timeAt, gamma/M_PI*180.0);
		//qDebug() << "a" << psi/M_PI*180.0 << theta/M_PI*180.0 << gamma/M_PI*180.0;

		// calculate moments
		aer_loads_mig29_moments( atan(tan(theta)*cos(gamma))/M_PI*180.0, asin(sin(theta)*sin(gamma))/M_PI*180.0, wx*L/2/V, wy*L/2/V, wz*ba/V, fi, df, da, dr, -0.0177 );

		// calculate angular rate
		wx = wxPrevious+(wyPrevious*wzPrevious*(Jy-Jz)/Jx+Mx/Jx)*dtAt;
		wy = wyPrevious+(wzPrevious*wxPrevious*(Jz-Jx)/Jy+My/Jy)*dtAt;
		wz = wzPrevious+(wxPrevious*wyPrevious*(Jx-Jy)/Jz+Mz/Jz)*dtAt;

		wxPrevious = wx;
		wyPrevious = wy;
		wzPrevious = wz;

		// calculate angles
		psi = psiPrevious+( (wz*sin(gammaPrevious)-wy*cos(gammaPrevious))/sin(thetaPrevious) )*dtAt;
		theta = thetaPrevious+( wy*sin(gammaPrevious)+wz*cos(gammaPrevious) )*dtAt;
		gamma = gammaPrevious+( wx+(wy*cos(gammaPrevious)-wz*sin(gammaPrevious))*cos(thetaPrevious)/sin(thetaPrevious) )*dtAt;

		if( abs(psi)>2*M_PI ) psi= fmod(psi, 2*M_PI);
		if( abs(theta)>2*M_PI ) theta= fmod(theta, 2*M_PI);
		if( abs(gamma)>2*M_PI )	gamma= fmod(gamma, 2*M_PI);
		psiPrevious = psi;
		thetaPrevious = theta;
		gammaPrevious = gamma;

		if( _isStop || timeAt > MainWindow::ui().endTimeSpinBox->value() ) {
			_isStop = false;
			return;
		}
	}
}

extern float vDelta_o[6];
extern float dt;

void Calculator::startStop() {
	if( isRunning() ) {
		_isStop = true;
		wait(CALCULATOR_CLOSE_WAIT_TIME_MS);
	} else {
		reset();
		start();
	}
}

void Calculator::startUI() {
	MainWindow::ui().inputGroupBox->setEnabled(false);
	MainWindow::ui().startPushButton->setText("Pause");
}

void Calculator::stopUI() {
	MainWindow::ui().inputGroupBox->setEnabled(true);
	MainWindow::ui().startPushButton->setText("Start");
}



typedef struct { 		         // input data struct
	 float W[3];        // wx, wy, wz до фильтра Калмана [deg/s]
	 float Wk[3];       // wx, wy, wz после фильтра Калмана [deg/s]
	 float PHI[3];      // gamma, teta, psi от фильтра Калмана [deg]
	 float encData[3];  // данные - encoder1,2,3 [deg]
	 // encoder1 - крен
	 // encoder2 - рыскание
	 // encoder3 - тангаж
} _DLMIN;

typedef struct { 		         // out data struct
	 float ANGL[6];	     // углы отклонения органов управления в [deg]
	 // 1 - правый элерон			0
	 // 2 - стабилизатор правый	1
	 // 3 - левый элерон			2
	 // 4 - руль направления		3
	 // 5 - стабилизатор левый		4
	 // 6 - не используется		5
} _DLMOUT;
_DLMIN InData;
_DLMOUT OutData;

extern "C" int umain(const _DLMIN *InData, _DLMOUT *OutData);

void Calculator::updateAlgorythm() {
	InData.Wk[0] = wx;
	InData.Wk[1] = wy;
	InData.Wk[2] = wz;
	InData.encData[0] = gamma;
	InData.encData[1] = psi;
	InData.encData[2] = theta;
	//qDebug() << "input" << InData.encData[0] << InData.encData[1] << InData.encData[2];
	umain( (const _DLMIN*)&InData, (_DLMOUT*)&OutData);
	//   fi - angle of GO deflection (deg) [-35deg 10deg]
	//   df - differentional GO deflection (deg)
	//   da - aileron deflection (deg) [-20deg 20deg]
	//   dr - rudder deflection (deg) [-25deg 25deg]

	//qDebug() << "output" << OutData.ANGL[0] << OutData.ANGL[1] << OutData.ANGL[2] << OutData.ANGL[3] << OutData.ANGL[4] << OutData.ANGL[5];
	fi = (OutData.ANGL[1]+OutData.ANGL[4])/2;
	df = (OutData.ANGL[1]-OutData.ANGL[4])/2;
	da = (OutData.ANGL[0]-OutData.ANGL[2])/2;
	dr = OutData.ANGL[3];

	emit newPlot("fi", timeAt, fi);
	emit newPlot("df", timeAt, df);
	emit newPlot("da", timeAt, da);
	emit newPlot("dr", timeAt, dr);
	emit newPlot("servo1", timeAt, OutData.ANGL[0]);
	emit newPlot("servo2", timeAt, OutData.ANGL[1]);
	emit newPlot("servo3", timeAt, OutData.ANGL[2]);
	emit newPlot("servo4", timeAt, OutData.ANGL[3]);
	emit newPlot("servo5", timeAt, OutData.ANGL[4]);
}

void Calculator::reset() {
	Jx = MainWindow::ui().JxDoubleSpinBox->value();
	Jy = MainWindow::ui().JyDoubleSpinBox->value();
	Jz = MainWindow::ui().JzDoubleSpinBox->value();
	rho = MainWindow::ui().rhoDoubleSpinBox->value();
	V = MainWindow::ui().VDoubleSpinBox->value();
	S = MainWindow::ui().SDoubleSpinBox->value();
	L = MainWindow::ui().LDoubleSpinBox->value();
	ba = MainWindow::ui().baDoubleSpinBox->value();

	Mx = MxPrevious = 0;
	My = MyPrevious = 0;
	Mz = MzPrevious = 0;

	wx = wxPrevious = MainWindow::ui().wxDoubleSpinBox->value();
	wy = wyPrevious = MainWindow::ui().wyDoubleSpinBox->value();
	wz = wzPrevious = MainWindow::ui().wzDoubleSpinBox->value();

	theta = thetaPrevious = (MainWindow::ui().thetaDoubleSpinBox->value())/180*M_PI;
	psi = psiPrevious = (MainWindow::ui().psiDoubleSpinBox->value())/180*M_PI;
	gamma = gammaPrevious = (MainWindow::ui().gammaDoubleSpinBox->value())/180*M_PI;

	dtAt = MainWindow::ui().tAtDoubleSpinBox->value();
	dtAl = MainWindow::ui().tAlDoubleSpinBox->value();
	timeAl = 0;
	timeAt = 0;

	fi = MainWindow::ui().fiDoubleSpinBox->value();
	df = MainWindow::ui().dfDoubleSpinBox->value();
	da = MainWindow::ui().daDoubleSpinBox->value();
	dr = MainWindow::ui().drDoubleSpinBox->value();
	vDelta_o[0] = da;
	vDelta_o[2] = -da;
	vDelta_o[1] = fi+df;
	vDelta_o[3] = dr;
	vDelta_o[4] = fi-df;
	dt = dtAl;

	MainWindow::instance().reset();
}




void Calculator::aer_loads_mig29_moments( double al, double be, double wx, double wy, double wz, double fi, double df, double da, double dr, double dx ) {
	//qDebug() << "aer_loads_mig29_moments" << al << be << wx << wy << wz << fi << df << da << dr << dx;
	// MIG-29 low subsonic aerodynamic loads mathematical model (Syrovatsky)
	//   Input
	//   al - angle of attack (deg) [-5deg 90deg]
	//   be - angle of sideslip (deg) [-20deg 20deg]
	//   wx - roll rate (undimensioanal)
	//   wy - yaw rate (undimensioanal)
	//   wz - pitch rate (undimensioanal)
	//   fi - angle of GO deflection (deg) [-35deg 10deg]
	//   df - differentional GO deflection (deg)
	//   da - aileron deflection (deg) [-20deg 20deg]
	//   dr - rudder deflection (deg) [-25deg 25deg]
	//   dx - CG position displacement
	//   Output
	//   cx - aeodynamic drag coefficient in body fixed frame
	//   cy - aeodynamic drag coefficientin body fixed frame
	//   cz - aeodynamic drag coefficientin body fixed frame
	//   mx - rolling moment coefficient in body fixed frame
	//   my - yawing moment coefficient in body fixed frame
	//   mz - pitching moment coefficient in body fixed frame

	double cx, cy, cz, mx, my, mz;

	cx = cx_al(al);
	cy = cy_al_fi(al,fi);
	cz = cz0(al) + dcz_al_be(al,be) + dcz_da(al)*da + dcz_al_dr(al,dr) + dcz_al_fi(al,fi)*df;
	mx = mx0(al) + dmx_al_be(al,be) + dmx_da(al)*da + dmx_al_dr(al,dr) + dmx_al_fi(al,fi)*df + mxwx_al(al)*wx + mxwy_al(al)*wy;
	my = my0(al) + dmy_al_be(al,be) + dmy_da(al)*da + dmy_al_dr(al,dr) + dmy_al_fi(al,fi)*df + mywx_al(al)*wx + mywy_al_fi(al,fi)*wy;
	mz = mz_al_fi(al,fi) + dmz_al_be(al,be) + mzwz_al(al)*wz + dx*cy;

	Mx = mx*S*L*rho*V*V*0.5;
	My = my*S*L*rho*V*V*0.5;
	Mz = mz*S*ba*rho*V*V*0.5;

	/*qDebug() << "mx" << Mx << mx;
	qDebug() << "my" << My << my;
	qDebug() << "mz"  << Mz << mz;*/
}




// ################## c_x #######################
double Calculator::cx_al( double al ) {
	static double al0[20] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double cx[20] = {0.05, 0.023, 0, -0.03, -0.06, -0.08, -0.08, -0.08, -0.08, -0.07, -0.06, -0.05, -0.04, -0.03, -0.02, -0.01, 0, 0, 0, 0};
	return interp1l(al0,cx,al);
}




// ################## c_y #######################
double Calculator::cy_al_fi( double al, double fi ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double fi0[7] = {-30, -28, -24, -20, -26, -12, 0};
	static double cy[182] = {
		-0.2288,  -0.1901,  -0.2044,  -0.1689,  -0.1436,  -0.1155,  -0.0399,
		-0.0686,  -0.0620,  -0.0454,  -0.0228,   0.0030,   0.0320,   0.1137,
		0.0698,   0.0776,   0.0953,   0.1193,   0.1441,   0.1775,   0.2586,
		0.2123,   0.2203,   0.2363,   0.2655,   0.2871,   0.3254,   0.4044,
		0.3566,   0.3600,   0.3761,   0.4113,   0.4310,   0.4709,   0.5481,
		0.4972,   0.4928,   0.5108,   0.5477,   0.5688,   0.6061,   0.6844,
		0.6260,   0.6163,   0.6358,   0.6684,   0.6936,   0.7267,   0.8068,
		0.7393,   0.7299,   0.7503,   0.7775,   0.8057,   0.8366,   0.9174,
		0.8423,   0.8380,   0.8601,   0.8852,   0.9126,   0.9440,   1.0254,
		0.9460,   0.9454,   0.9710,   0.9989,   1.0210,   1.0537,   1.1388,
		1.0569,   1.0536,   1.0814,   1.1114,   1.1300,   1.1631,   1.2551,
		1.1671,   1.1604,   1.1852,   1.2154,   1.2354,   1.2681,   1.3662,
		1.2701,   1.2646,   1.2839,   1.3173,   1.3399,   1.3716,   1.4717,
		1.3657,   1.3632,   1.3823,   1.4233,   1.4436,   1.4749,   1.5760,
		1.4439,   1.4430,   1.4673,   1.5110,   1.5266,   1.5627,   1.6653,
		1.4845,   1.4873,   1.5138,   1.5497,   1.5654,   1.6099,   1.7119,
		1.4940,   1.5033,   1.5249,   1.5554,   1.5740,   1.6199,   1.7199,
		1.5116,   1.5225,   1.5397,   1.5753,   1.5945,   1.6327,   1.7353,
		1.5472,   1.5527,   1.5726,   1.6108,   1.6324,   1.6701,   1.7768,
		1.5724,   1.5718,   1.6001,   1.6268,   1.6560,   1.7048,   1.8083,
		1.5751,   1.5721,   1.6106,   1.6241,   1.6582,   1.7097,   1.8041,
		1.5742,   1.5691,   1.6144,   1.6325,   1.6642,   1.7061,   1.7872,
		1.5843,   1.5759,   1.6205,   1.6569,   1.6819,   1.7221,   1.7841,
		1.5974,   1.5926,   1.6319,   1.6819,   1.6987,   1.7447,   1.7926,
		1.6082,   1.6135,   1.6468,   1.6994,   1.7139,   1.7548,   1.8024,
		1.6232,   1.6311,   1.6616,   1.7099,   1.7342,   1.7591,   1.8100 };
	return interp2l( (double*) fi0, 7, (double*) al0, 25, (double*)cy, fi, al );
}





// ################## c_z #######################
double Calculator::cz0( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double cz[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	return interp1l( (double*) al0, 26, (double*) cz, 26, al );
}

double Calculator::dcz_al_be( double al, double be ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double be0[11] = {-20, -16, -12, -8, -4, 0, 4, 8, 12, 16, 20};
	static double cz[286] = {
		0.2699,  0.2249,  0.1718,  0.1159,  0.0558, 0, -0.0579, -0.1164,  -0.173, -0.2268, -0.2698,
		0.2739,  0.2303,   0.175,   0.119,  0.0577, 0, -0.0612, -0.1214, -0.1775, -0.2334, -0.2712,
		0.2784,  0.2369,  0.1789,  0.1221,  0.0599, 0, -0.0625, -0.1233, -0.1816, -0.2357, -0.2735,
		0.2825,  0.2411,   0.182,  0.1244,  0.0619, 0, -0.0628, -0.1241, -0.1844, -0.2352, -0.2756,
		0.2833,  0.2404,  0.1841,  0.1259,  0.0632, 0, -0.0634, -0.1252, -0.1856, -0.2336, -0.2761,
		0.2802,  0.2367,  0.1847,  0.1267,  0.0644, 0, -0.0647, -0.1269, -0.1853, -0.2317, -0.2731,
		0.2756,  0.2332,  0.1837,  0.1257,  0.0649, 0, -0.0659, -0.1277, -0.1848, -0.2307, -0.2681,
		0.2714,  0.2308,  0.1806,  0.1221,  0.0629, 0, -0.0649,  -0.126,  -0.184, -0.2304, -0.2649,
		0.2666,   0.227,  0.1752,  0.1163,  0.0578, 0, -0.0602, -0.1216, -0.1811, -0.2292, -0.2637,
		  0.26,  0.2203,  0.1682,  0.1099,  0.0522, 0, -0.0535, -0.1154, -0.1743, -0.2242, -0.2582,
		0.2512,  0.2125,  0.1612,  0.1056,  0.0502, 0, -0.0489, -0.1082, -0.1644, -0.2142, -0.2426,
		0.2407,   0.204,  0.1548,  0.1039,  0.0512, 0, -0.0478, -0.1029, -0.1546, -0.2021, -0.2232,
		0.2301,  0.1948,  0.1493,  0.1023,    0.05, 0, -0.0486, -0.1016, -0.1492, -0.1921,  -0.213,
		0.2224,  0.1884,  0.1465,  0.0988,  0.0465, 0, -0.0491, -0.1014, -0.1477,  -0.186, -0.2134,
		0.2202,  0.1865,  0.1468,  0.0981,  0.0483, 0, -0.0514, -0.0998, -0.1453, -0.1816, -0.2156,
		0.2198,  0.1842,  0.1486,  0.1062,    0.06, 0, -0.0581, -0.1013, -0.1408, -0.1756, -0.2137,
		0.2155,  0.1797,  0.1513,  0.1207,  0.0716, 0, -0.0643, -0.1098, -0.1392, -0.1673, -0.2074,
		0.2119,   0.181,  0.1559,  0.1304,  0.0712, 0, -0.0607, -0.1176, -0.1412, -0.1594, -0.1969,
		0.2168,  0.1907,  0.1636,  0.1312,  0.0653, 0, -0.0527, -0.1179, -0.1416, -0.1579, -0.1863,
		0.2245,  0.1992,  0.1735,  0.1301,  0.0658, 0, -0.0558, -0.1142, -0.1421, -0.1651, -0.1824,
		0.2248,  0.2018,  0.1781,  0.1277,  0.0695, 0, -0.0672, -0.1105, -0.1498, -0.1751, -0.1877,
		 0.219,  0.1991,  0.1704,  0.1184,  0.0666, 0, -0.0678, -0.1028,  -0.156, -0.1785, -0.1945,
		0.2138,  0.1895,  0.1577,   0.109,  0.0608, 0, -0.0547, -0.0917, -0.1452, -0.1724, -0.1949,
		0.2108,  0.1775,  0.1519,  0.1075,  0.0589, 0, -0.0454, -0.0867, -0.1278, -0.1663, -0.1936,
		0.2119,  0.1767,  0.1557,  0.1109,  0.0579, 0, -0.0475, -0.0885, -0.1224, -0.1653, -0.1919,
		0.2167,  0.1887,  0.1633,  0.1143,  0.0576, 0,  -0.049, -0.0885, -0.1252, -0.1604, -0.1812 };
	return interp2l(be0, 11, al0, 26, cz, be, al);
}

double Calculator::dcz_da( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double cz[26] = {
		0.00108,
		0.00103,
		0.00105,
		0.00106,
		0.00103,
		0.00099,
		0.00095,
		0.00091,
		0.00082,
		0.00065,
		0.00044,
		0.00034,
		0.00037,
		0.00039,
		0.00016,
	   -0.00038,
	   -0.00087,
	   -0.00088,
	   -0.00051,
	   -0.00026,
	   -0.00041,
	   -0.00071,
	   -0.00080,
	   -0.00076,
	   -0.00078,
	   -0.00083,
	};
	return interp1l(al0, 26, cz, 26, al);
}

double Calculator::dcz_al_dr( double al, double dr ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double dr0[5] = {-20, -10, 0, 10, 20};
	static double cz[130] = {
		 -0.061, -0.0356, 0,  0.0353,   0.058,
		-0.0618, -0.0366, 0,   0.035,  0.0571,
		-0.0623,  -0.037, 0,  0.0351,   0.057,
		-0.0626, -0.0368, 0,  0.0357,  0.0571,
		-0.0635, -0.0368, 0,  0.0359,  0.0573,
		-0.0645, -0.0367, 0,  0.0355,  0.0579,
		-0.0643, -0.0359, 0,  0.0344,  0.0581,
		-0.0618, -0.0338, 0,  0.0324,  0.0562,
		-0.0571, -0.0303, 0,  0.0292,  0.0513,
		-0.0502, -0.0254, 0,  0.0248,  0.0436,
		-0.0411, -0.0195, 0,  0.0206,  0.0361,
		 -0.032, -0.0146, 0,  0.0172,  0.0309,
		-0.0265, -0.0133, 0,   0.014,  0.0272,
		-0.0256, -0.0143, 0,  0.0111,  0.0239,
		-0.0262, -0.0143, 0,  0.0089,    0.02,
		-0.0246, -0.0125, 0,  0.0062,  0.0148,
		-0.0193, -0.0102, 0,   0.002,  0.0088,
		-0.0111, -0.0068, 0, -0.0011,  0.0058,
		-0.0037, -0.0018, 0, -0.0003,  0.0065,
		 -0.001,  0.0026, 0,  0.0018,   0.005,
		-0.0034,  0.0033, 0,  0.0009, -0.0024,
		-0.0059,  0.0015, 0, -0.0019, -0.0087,
		-0.0035,  0.0014, 0, -0.0028, -0.0057,
		-0.0008,   0.001, 0, -0.0043, -0.0005,
		-0.0024, -0.0012, 0, -0.0067, -0.0018,
		-0.0031, -0.0011, 0, -0.0029, -0.0027 };
	return interp2l(dr0, 5, al0, 26, cz, dr, al);
}

double Calculator::dcz_al_fi( double al, double fi ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double fi0[10] = {-28, -26, -24, -22, -20, -18, -16, -14, -12, 0};
	static double cz[260] = {
		 0.00288,  0.00349,  0.00328,  0.00359,  0.00345,  0.00351,  0.00334,  0.00316,  0.00274,  0.00274,
		 0.00360,  0.00355,  0.00341,  0.00369,  0.00341,  0.00345,  0.00324,  0.00313,  0.00290,  0.00290,
		 0.00377,  0.00354,  0.00347,  0.00370,  0.00341,  0.00346,  0.00326,  0.00309,  0.00289,  0.00289,
		 0.00380,  0.00350,  0.00351,  0.00366,  0.00341,  0.00340,  0.00323,  0.00302,  0.00283,  0.00283,
		 0.00358,  0.00344,  0.00344,  0.00356,  0.00337,  0.00329,  0.00308,  0.00293,  0.00273,  0.00273,
		 0.00330,  0.00345,  0.00326,  0.00339,  0.00325,  0.00320,  0.00285,  0.00276,  0.00256,  0.00256,
		 0.00315,  0.00341,  0.00309,  0.00320,  0.00306,  0.00304,  0.00264,  0.00246,  0.00230,  0.00230,
		 0.00307,  0.00305,  0.00284,  0.00288,  0.00274,  0.00251,  0.00244,  0.00213,  0.00199,  0.00199,
		 0.00288,  0.00241,  0.00236,  0.00242,  0.00211,  0.00173,  0.00211,  0.00183,  0.00174,  0.00174,
		 0.00225,  0.00199,  0.00174,  0.00195,  0.00140,  0.00127,  0.00160,  0.00168,  0.00152,  0.00152,
		 0.00140,  0.00181,  0.00133,  0.00164,  0.00112,  0.00138,  0.00117,  0.00155,  0.00132,  0.00132,
		 0.00072,  0.00150,  0.00125,  0.00154,  0.00139,  0.00152,  0.00106,  0.00137,  0.00111,  0.00111,
		 0.00077,  0.00124,  0.00136,  0.00162,  0.00166,  0.00133,  0.00120,  0.00113,  0.00090,  0.00090,
		 0.00158,  0.00137,  0.00161,  0.00180,  0.00154,  0.00114,  0.00119,  0.00097,  0.00066,  0.00066,
		 0.00237,  0.00195,  0.00157,  0.00175,  0.00130,  0.00110,  0.00103,  0.00087,  0.00045,  0.00045,
		 0.00238,  0.00246,  0.00100,  0.00114,  0.00116,  0.00086,  0.00087,  0.00059,  0.00053,  0.00053,
		 0.00158,  0.00192,  0.00051,  0.00034,  0.00079,  0.00032,  0.00092,  0.00008,  0.00103,  0.00103,
		 0.00072,  0.00038,  0.00063, -0.00001,  0.00026,  0.00022,  0.00084, -0.00030,  0.00129,  0.00129,
		 0.00030, -0.00040,  0.00065,  0.00014,  0.00019,  0.00083,  0.00042, -0.00016,  0.00068,  0.00068,
		 0.00027,  0.00049,  0.00024,  0.00020,  0.00039,  0.00093,  0.00026,  0.00021, -0.00023, -0.00023,
		 0.00053,  0.00159,  0.00015, -0.00002,  0.00025,  0.00001,  0.00083,  0.00002, -0.00058, -0.00058,
		 0.00020,  0.00130,  0.00054, -0.00000,  0.00015, -0.00041,  0.00153, -0.00049, -0.00015, -0.00015,
		-0.00092, -0.00001,  0.00058,  0.00026,  0.00025, -0.00002,  0.00135, -0.00043,  0.00053,  0.00053,
		-0.00100, -0.00068,  0.00016,  0.00005,  0.00004, -0.00014, -0.00011, -0.00030,  0.00040,  0.00040,
		 0.00005, -0.00005, -0.00032, -0.00054, -0.00046, -0.00070, -0.00157, -0.00077, -0.00078, -0.00078,
		 0.00033,  0.00031, -0.00079, -0.00079, -0.00081, -0.00077, -0.00177, -0.00146, -0.00220, -0.00220 };
	return interp2l(fi0, 10, al0, 26, cz, fi, al);
}




// ################## m_x #######################
double Calculator::mx0( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double mx[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	return interp1l( al0, 26, mx, 26, al );
}

double Calculator::dmx_al_be( double al, double be ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double be0[11] = {-20, -16, -12, -8, -4, 0, 4, 8, 12, 16, 20};
	static double mx[286] = {
		0.0054,  0.0088,  0.0088,  0.0074,  0.0037, 0, -0.0022, -0.0065, -0.0065, -0.0068, -0.0035,
		0.0094,  0.0109,  0.0097,  0.0077,  0.0039, 0, -0.0038, -0.0068, -0.0088, -0.0102, -0.0089,
		0.0133,  0.0138,  0.0115,  0.0086,  0.0043, 0, -0.0047, -0.0083, -0.0112, -0.0133, -0.0133,
		0.0182,  0.0176,  0.0147,  0.0107,  0.0054, 0, -0.0055, -0.0103, -0.0145,  -0.017, -0.0182,
		 0.025,  0.0233,  0.0192,  0.0137,  0.0072, 0, -0.0066, -0.0129, -0.0186, -0.0222, -0.0245,
		0.0331,  0.0301,   0.024,  0.0169,  0.0089, 0, -0.0077, -0.0155,  -0.023, -0.0283, -0.0319,
		0.0396,  0.0351,  0.0276,  0.0191,  0.0096, 0, -0.0088,  -0.018, -0.0268, -0.0336, -0.0387,
		0.0425,  0.0371,  0.0295,  0.0201,  0.0096, 0, -0.0093, -0.0197, -0.0289, -0.0364, -0.0428,
		0.0431,  0.0377,    0.03,    0.02,  0.0095, 0, -0.0095,   -0.02, -0.0288, -0.0371, -0.0443,
		0.0446,  0.0382,  0.0292,  0.0194,    0.01, 0, -0.0099, -0.0191, -0.0274, -0.0365, -0.0445,
		0.0462,  0.0375,  0.0276,  0.0188,  0.0095, 0, -0.0104, -0.0192, -0.0277, -0.0363, -0.0448,
		0.0463,  0.0376,  0.0276,  0.0181,  0.0079, 0,   -0.01, -0.0202, -0.0302, -0.0379, -0.0453,
		0.0476,  0.0398,  0.0291,  0.0176,  0.0074, 0, -0.0089, -0.0201, -0.0322, -0.0408, -0.0475,
		0.0508,  0.0412,  0.0297,  0.0175,  0.0089, 0, -0.0081, -0.0183, -0.0303, -0.0413, -0.0507,
		0.0512,  0.0384,  0.0269,   0.016,  0.0085, 0, -0.0065, -0.0151, -0.0262, -0.0392, -0.0521,
		0.0487,   0.034,  0.0219,  0.0107,   0.003, 0, -0.0033,  -0.011, -0.0244, -0.0388, -0.0519,
		0.0468,  0.0319,  0.0188,  0.0047, -0.0029, 0, -0.0011,  -0.008, -0.0249, -0.0411, -0.0529,
		0.0453,  0.0311,  0.0186,  0.0031, -0.0034, 0, -0.0033, -0.0091, -0.0255, -0.0426, -0.0542,
		0.0428,  0.0302,  0.0186,   0.006, -0.0009, 0,  -0.006, -0.0126, -0.0261, -0.0415, -0.0532,
		0.0419,  0.0301,  0.0177,   0.009,  0.0005, 0, -0.0042,  -0.014, -0.0261, -0.0389, -0.0506,
		0.0442,  0.0316,  0.0183,   0.011,  0.0014, 0, -0.0014, -0.0133,  -0.025, -0.0361, -0.0484,
		0.0463,  0.0333,  0.0216,  0.0132,  0.0037, 0, -0.0039, -0.0158, -0.0247,  -0.035, -0.0476,
		0.0461,  0.0352,  0.0258,  0.0162,   0.007, 0, -0.0097, -0.0211, -0.0271, -0.0358, -0.0469,
		0.0448,  0.0369,   0.029,  0.0192,  0.0091, 0, -0.0127, -0.0237, -0.0301,  -0.036, -0.0443,
		0.0432,  0.0368,  0.0305,  0.0209,  0.0098, 0, -0.0112, -0.0221, -0.0308, -0.0345, -0.0411,
		0.0408,  0.0349,  0.0295,  0.0192,    0.01, 0,  -0.009,  -0.021, -0.0298, -0.0331, -0.0395 };
	return interp2l(be0, 11, al0, 26, mx, be, al);
}

double Calculator::dmx_da( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double mx[26] = {
		-0.00150,
		-0.00158,
		-0.00164,
		-0.00168,
		-0.00166,
		-0.00162,
		-0.00153,
		-0.00145,
		-0.00135,
		-0.00123,
		-0.00108,
		-0.00097,
		-0.00090,
		-0.00084,
		-0.00069,
		-0.00046,
		-0.00033,
		-0.00038,
		-0.00054,
		-0.00062,
		-0.00056,
		-0.00046,
		-0.00040,
		-0.00043
		-0.00045,
		-0.00045
	};
	return interp1l(al0, 26, mx, 26, al);
}

double Calculator::dmx_al_dr( double al, double dr ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double dr0[5] = {-20, -10, 0, 10, 20};
	static double mx[130] = {
		 -0.0032, -0.0019, 0,  0.0022,  0.0037,
		 -0.0031, -0.0018, 0,  0.0023,  0.0036,
		 -0.0032, -0.0019, 0,  0.0021,  0.0032,
		 -0.0032, -0.0018, 0,   0.002,   0.003,
		 -0.0029, -0.0016, 0,  0.0022,   0.003,
		 -0.0025, -0.0013, 0,  0.0023,   0.003,
		 -0.0023, -0.0012, 0,  0.0018,  0.0025,
		 -0.0022, -0.0013, 0,  0.0009,  0.0015,
		 -0.0016, -0.0011, 0,  0.0001,  0.0006,
		 -0.0007, -0.0004, 0,       0,  0.0004,
		 -0.0004, -0.0003, 0, -0.0002,  0.0004,
		 -0.0008, -0.0006, 0, -0.0006, -0.0001,
		 -0.0011, -0.0009, 0, -0.0009, -0.0008,
		 -0.0002, -0.0004, 0, -0.0004, -0.0012,
		  0.0014,  0.0005, 0,  0.0006, -0.0006,
		  0.0021,   0.001, 0,  0.0018,   0.001,
		  0.0011,  0.0007, 0,  0.0025,  0.0025,
		  -0.001, -0.0003, 0,  0.0024,  0.0026,
		  -0.003,  -0.002, 0,  0.0014,  0.0015,
		 -0.0036, -0.0028, 0,  0.0009,  0.0015,
		 -0.0029, -0.0024, 0,  0.0013,  0.0032,
		 -0.0026,  -0.002, 0,   0.001,   0.004,
		 -0.0027, -0.0017, 0,       0,  0.0025,
		 -0.0018, -0.0009, 0, -0.0001,  0.0006,
		 -0.0006, -0.0004, 0,  0.0005, -0.0001,
		 -0.0008, -0.0009, 0, -0.0001, -0.0006 };
	return interp2l(dr0, 5, al0, 26, mx, dr, al);
}

double Calculator::dmx_al_fi( double al, double fi ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double fi0[10] = {-28, -26, -24, -22, -20, -18, -16, -14, -12, 0};
	static double mx[260] = {
		-0.00053, -0.00060, -0.00071, -0.00088, -0.00089, -0.00103, -0.00108, -0.00112, -0.00115, -0.00115,
		-0.00053, -0.00064, -0.00073, -0.00089, -0.00092, -0.00105, -0.00110, -0.00114, -0.00116, -0.00116,
		-0.00057, -0.00069, -0.00078, -0.00090, -0.00094, -0.00107, -0.00112, -0.00114, -0.00117, -0.00117,
		-0.00065, -0.00072, -0.00082, -0.00094, -0.00097, -0.00107, -0.00114, -0.00116, -0.00116, -0.00116,
		-0.00065, -0.00076, -0.00083, -0.00099, -0.00100, -0.00106, -0.00111, -0.00114, -0.00114, -0.00114,
		-0.00065, -0.00080, -0.00088, -0.00102, -0.00102, -0.00106, -0.00107, -0.00113, -0.00111, -0.00111,
		-0.00073, -0.00085, -0.00091, -0.00103, -0.00103, -0.00108, -0.00106, -0.00110, -0.00108, -0.00108,
		-0.00077, -0.00091, -0.00097, -0.00104, -0.00102, -0.00110, -0.00106, -0.00108, -0.00106, -0.00106,
		-0.00085, -0.00095, -0.00101, -0.00102, -0.00102, -0.00109, -0.00105, -0.00106, -0.00101, -0.00101,
		-0.00097, -0.00096, -0.00102, -0.00100, -0.00104, -0.00105, -0.00103, -0.00105, -0.00102, -0.00102,
		-0.00105, -0.00097, -0.00097, -0.00101, -0.00104, -0.00103, -0.00105, -0.00105, -0.00106, -0.00106,
		-0.00105, -0.00100, -0.00089, -0.00102, -0.00099, -0.00102, -0.00109, -0.00112, -0.00115, -0.00115,
		-0.00100, -0.00108, -0.00091, -0.00109, -0.00098, -0.00104, -0.00116, -0.00124, -0.00126, -0.00126,
		-0.00110, -0.00110, -0.00107, -0.00125, -0.00107, -0.00118, -0.00130, -0.00137, -0.00131, -0.00131,
		-0.00133, -0.00129, -0.00117, -0.00140, -0.00124, -0.00133, -0.00146, -0.00149, -0.00134, -0.00134,
		-0.00143, -0.00161, -0.00106, -0.00132, -0.00136, -0.00138, -0.00157, -0.00150, -0.00146, -0.00146,
		-0.00133, -0.00156, -0.00099, -0.00112, -0.00131, -0.00133, -0.00159, -0.00142, -0.00173, -0.00173,
		-0.00113, -0.00111, -0.00115, -0.00110, -0.00118, -0.00137, -0.00155, -0.00135, -0.00186, -0.00186,
		-0.00097, -0.00084, -0.00126, -0.00127, -0.00126, -0.00158, -0.00148, -0.00135, -0.00162, -0.00162,
		-0.00090, -0.00109, -0.00116, -0.00136, -0.00138, -0.00165, -0.00144, -0.00138, -0.00127, -0.00127,
		-0.00103, -0.00139, -0.00115, -0.00126, -0.00130, -0.00135, -0.00146, -0.00131, -0.00110, -0.00110,
		-0.00118, -0.00136, -0.00126, -0.00120, -0.00118, -0.00111, -0.00147, -0.00116, -0.00110, -0.00110,
		-0.00113, -0.00116, -0.00133, -0.00126, -0.00121, -0.00117, -0.00136, -0.00114, -0.00117, -0.00117,
		-0.00112, -0.00109, -0.00122, -0.00129, -0.00123, -0.00119, -0.00115, -0.00116, -0.00115, -0.00115,
		-0.00128, -0.00121, -0.00110, -0.00121, -0.00114, -0.00105, -0.00100, -0.00109, -0.00100, -0.00100,
		-0.00140, -0.00125, -0.00107, -0.00116, -0.00106, -0.00099, -0.00101, -0.00096, -0.00081, -0.00081 };
	return interp2l(fi0, 10, al0, 26, mx, fi, al);
}

double Calculator::mxwx_al( double al ) {
	static double al0[20] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double mxwx[20] = {-0.4, -0.32, -0.28, -0.24, -0.2, -0.36, -0.24, -0.15, -0.5, -0.32, -0.18, -0.12, -0.4, -0.42, -0.54, -0.26, -0.25, -0.26, -0.26, -0.26 };

	return interp1l(al0, mxwx, al);
}

double Calculator::mxwy_al( double al ) {
	static double al0[] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double mxwy[] = {0.1, 0, -0.1, -0.15, -0.2, -0.25, -0.35, -0.45, -1.2, -0.5, -0.25, -0.1, -0.25, -0.25, -0.2, -0.1, -0.1, -0.05, -0.05, -0.01 };

	return interp1l(al0, mxwy, al);
}




// ################## m_y #######################
double Calculator::my0( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double my[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	return interp1l( al0, 26, my, 26, al );
}

double Calculator::dmy_al_be( double al, double be ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double be0[11] = {-20, -16, -12, -8, -4, 0, 4, 8, 12, 16, 20};
	static double my[286] = {
		 0.0154,  0.0168,  0.0148,  0.0105,  0.0048, 0, -0.0056,  -0.011,  -0.014, -0.0161, -0.0121,
		 0.0155,  0.0177,  0.0151,  0.0109,   0.005, 0, -0.0059,  -0.011, -0.0144, -0.0163, -0.0119,
		  0.016,  0.0186,  0.0155,  0.0114,  0.0055, 0,  -0.006,  -0.011, -0.0147, -0.0158,  -0.012,
		  0.017,  0.0189,  0.0156,  0.0116,  0.0058, 0, -0.0059, -0.0107, -0.0149, -0.0154,  -0.013,
		 0.0182,  0.0196,  0.0157,  0.0113,  0.0059, 0, -0.0057, -0.0105, -0.0154, -0.0163, -0.0146,
		 0.0194,  0.0212,  0.0168,  0.0115,  0.0062, 0, -0.0055, -0.0107, -0.0166, -0.0182, -0.0155,
		 0.0203,   0.023,  0.0186,  0.0126,  0.0065, 0, -0.0059, -0.0121, -0.0185, -0.0199, -0.0155,
		 0.0205,  0.0235,  0.0197,  0.0138,  0.0067, 0, -0.0068, -0.0137, -0.0197, -0.0205, -0.0154,
		  0.019,  0.0214,  0.0184,  0.0135,  0.0063, 0, -0.0073,  -0.014, -0.0188, -0.0194, -0.0154,
		  0.015,  0.0167,  0.0146,  0.0111,   0.005, 0, -0.0063,  -0.012, -0.0153, -0.0158, -0.0127,
		 0.0088,  0.0109,  0.0101,  0.0078,  0.0032, 0, -0.0036, -0.0078, -0.0098, -0.0097, -0.0046,
		 0.0012,  0.0044,  0.0053,  0.0042,  0.0013, 0, -0.0006, -0.0031, -0.0039, -0.0024,  0.0058,
		-0.0069, -0.0028, -0.0001,  0.0002, -0.0006, 0,  0.0011,  0.0005,  0.0014,  0.0043,  0.0136,
		-0.0151, -0.0102, -0.0064, -0.0035, -0.0023, 0,  0.0011,  0.0026,  0.0063,  0.0101,   0.018,
		-0.0219, -0.0168, -0.0123, -0.0057, -0.0025, 0,  0.0014,  0.0052,  0.0119,  0.0161,  0.0226,
		-0.0272,  -0.023, -0.0169, -0.0075,  -0.002, 0,  0.0029,   0.009,  0.0175,  0.0226,   0.028,
		-0.0323, -0.0293, -0.0209, -0.0109,  -0.004, 0,  0.0047,  0.0119,   0.021,   0.028,  0.0326,
		 -0.038, -0.0345, -0.0253, -0.0159, -0.0098, 0,  0.0072,   0.013,  0.0231,  0.0308,  0.0363,
		-0.0417, -0.0359, -0.0287, -0.0214, -0.0152, 0,  0.0118,  0.0156,  0.0252,  0.0318,  0.0395,
		-0.0426, -0.0347, -0.0304, -0.0253, -0.0163, 0,  0.0156,  0.0204,  0.0263,  0.0325,  0.0412,
		-0.0438, -0.0365,  -0.033, -0.0273, -0.0152, 0,  0.0148,  0.0241,  0.0267,  0.0339,  0.0422,
		-0.0482, -0.0432, -0.0373, -0.0285, -0.0151, 0,  0.0131,  0.0251,  0.0299,  0.0368,  0.0445,
		-0.0548, -0.0508, -0.0417,  -0.031, -0.0169, 0,  0.0153,  0.0251,  0.0357,  0.0404,  0.0476,
		-0.0592, -0.0543, -0.0449, -0.0338, -0.0191, 0,  0.0182,  0.0262,  0.0386,  0.0419,  0.0487,
		-0.0581, -0.0526, -0.0452, -0.0336, -0.0193, 0,  0.0168,  0.0278,  0.0371,  0.0415,  0.0473,
		-0.0543, -0.0493, -0.0421,  -0.031, -0.0174, 0,  0.0112,  0.0274,   0.034,  0.0407,  0.0448 };
	return interp2l(be0, 11, al0, 26, my, be, al);
}

double Calculator::dmy_da( double al ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double my[26] = {
		 0.00020,
		 0.00020,
		 0.00020,
		 0.00019,
		 0.00020,
		 0.00020,
		 0.00020,
		 0.00018,
		 0.00013,
		 0.00005,
		-0.00002,
		-0.00006,
		-0.00006,
		-0.00006,
		-0.00009,
		-0.00014,
		-0.00017,
		-0.00016,
		-0.00013,
		-0.00010,
		-0.00007,
		-0.00005,
		-0.00004,
		-0.00002,
		-0.00001,
		-0.00001
	};
	return interp1l(al0, 26, my, 26, al);
}

double Calculator::dmy_al_dr( double al, double dr ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double dr0[5] = {-20, -10, 0, 10, 20};
	static double my[130] = {
		-0.0222, -0.0128, 0,  0.0134,  0.0217,
		-0.0224,  -0.013, 0,  0.0135,  0.0218,
		-0.0225,  -0.013, 0,  0.0135,  0.0219,
		-0.0227,  -0.013, 0,  0.0136,  0.0218,
		-0.0231, -0.0131, 0,  0.0136,  0.0218,
		-0.0231,  -0.013, 0,  0.0136,  0.0221,
		-0.0228, -0.0125, 0,  0.0134,  0.0222,
		-0.0217, -0.0115, 0,  0.0127,  0.0214,
		-0.0201, -0.0102, 0,  0.0111,   0.019,
		-0.0176, -0.0084, 0,   0.009,  0.0157,
		-0.0139, -0.0061, 0,  0.0073,  0.0127,
		-0.0103, -0.0043, 0,  0.0061,  0.0108,
		-0.0083, -0.0037, 0,  0.0051,  0.0095,
		-0.0082, -0.0042, 0,  0.0039,   0.008,
		-0.0083, -0.0042, 0,  0.0029,   0.007,
		-0.007, -0.0034, 0,  0.0028,  0.0065,
		-0.0053, -0.0028, 0,  0.0027,  0.0053,
		-0.0043, -0.0024, 0,   0.002,  0.0034,
		-0.0034, -0.0012, 0,  0.0017,  0.0024,
		-0.002,       0, 0,   0.002,  0.0027,
		-0.0008, -0.0001, 0,  0.0024,   0.003,
		   0, -0.0008, 0,   0.002,  0.0024,
		0.0004, -0.0006, 0,  0.0009,  0.0011,
		0.0006,  0.0002, 0, -0.0008,  0.0003,
		0.0008,   0.001, 0,  -0.001,  0.0011,
		0.0007,   0.001, 0,  0.0004,  0.0025 };
	return interp2l(dr0, 5, al0, 26, my, dr, al);
}

double Calculator::dmy_al_fi( double al, double fi ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double fi0[10] = {-28, -26, -24, -22, -20, -18, -16, -14, -12, 0};
	static double my[260] = {
		0.00185, 0.00186, 0.00183, 0.00191, 0.00173, 0.00171, 0.00159, 0.00147, 0.00129, 0.00129,
		0.00187, 0.00186, 0.00181, 0.00191, 0.00175, 0.00171, 0.00159, 0.00146, 0.00130, 0.00130,
		0.00190, 0.00187, 0.00182, 0.00189, 0.00174, 0.00168, 0.00157, 0.00142, 0.00129, 0.00129,
		0.00190, 0.00186, 0.00182, 0.00187, 0.00172, 0.00164, 0.00153, 0.00138, 0.00123, 0.00123,
		0.00183, 0.00184, 0.00175, 0.00180, 0.00166, 0.00157, 0.00145, 0.00131, 0.00115, 0.00115,
		0.00173, 0.00178, 0.00166, 0.00171, 0.00155, 0.00147, 0.00133, 0.00122, 0.00107, 0.00107,
		0.00165, 0.00170, 0.00156, 0.00158, 0.00145, 0.00136, 0.00120, 0.00108, 0.00095, 0.00095,
		0.00160, 0.00151, 0.00145, 0.00143, 0.00129, 0.00112, 0.00108, 0.00094, 0.00085, 0.00085,
		0.00150, 0.00128, 0.00122, 0.00123, 0.00101, 0.00082, 0.00087, 0.00079, 0.00073, 0.00073,
		0.00120, 0.00111, 0.00093, 0.00099, 0.00067, 0.00064, 0.00062, 0.00069, 0.00061, 0.00061,
		0.00072, 0.00092, 0.00069, 0.00080, 0.00052, 0.00063, 0.00044, 0.00061, 0.00045, 0.00045,
		0.00032, 0.00064, 0.00058, 0.00069, 0.00060, 0.00065, 0.00038, 0.00052, 0.00032, 0.00032,
		0.00035, 0.00049, 0.00059, 0.00069, 0.00071, 0.00056, 0.00040, 0.00039, 0.00020, 0.00020,
		0.00068, 0.00060, 0.00062, 0.00071, 0.00067, 0.00044, 0.00037, 0.00022, 0.00005, 0.00005,
		0.00090, 0.00075, 0.00063, 0.00063, 0.00048, 0.00029, 0.00022, 0.00004,-0.00016,-0.00016,
		0.00077, 0.00074, 0.00047, 0.00041, 0.00028, 0.00008,-0.00000,-0.00018,-0.00037,-0.00037,
		0.00045, 0.00054, 0.00026, 0.00023, 0.00014,-0.00007,-0.00015,-0.00035,-0.00050,-0.00050,
		0.00038, 0.00036, 0.00013, 0.00019,-0.00001,-0.00008,-0.00023,-0.00051,-0.00061,-0.00061,
		0.00047, 0.00026, 0.00018, 0.00003,-0.00021,-0.00019,-0.00040,-0.00070,-0.00092,-0.00092,
		0.00043, 0.00019, 0.00022,-0.00030,-0.00043,-0.00059,-0.00061,-0.00090,-0.00133,-0.00133,
		0.00028, 0.00015, 0.00011,-0.00047,-0.00055,-0.00092,-0.00081,-0.00104,-0.00153,-0.00153,
		0.00043, 0.00020,-0.00001,-0.00038,-0.00056,-0.00092,-0.00103,-0.00117,-0.00157,-0.00157,
		0.00065, 0.00025,-0.00002,-0.00033,-0.00052,-0.00083,-0.00121,-0.00126,-0.00167,-0.00167,
		0.00063, 0.00020,-0.00001,-0.00035,-0.00052,-0.00087,-0.00115,-0.00127,-0.00172,-0.00172,
		0.00047, 0.00015,-0.00006,-0.00034,-0.00060,-0.00095,-0.00098,-0.00122,-0.00155,-0.00155,
		0.00045, 0.00006,-0.00005,-0.00033,-0.00066,-0.00091,-0.00097,-0.00123,-0.00123,-0.00123 };
	 return interp2l(fi0, 10, al0, 26, my, fi, al);
}

double Calculator::mywx_al( double al ) {
	static double al0[20] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double mywx[20] = {-0.1, -0.1, -0.08, -0.05, -0.08, -0.08, -0.16, 0.1, -0.15, -0.04, -0.25, -0.4, -0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2};

	return interp1l( al0, mywx, al);
}

double Calculator::mywy_al_fi( double al, double fi ) {
	static double al0[20] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double fi0[2] = {-35, 0};
	static double mywy[40] = {
		-0.35,	-0.35,
		-0.35,	-0.35,
		-0.35,	-0.35,
		-0.4,	-0.4,
		-0.45,	-0.45,
		-0.4,	-0.4,
		-0.65,	-0.45,
		-0.15,	-0.1,
		-0.35,	-0.17,
		-0.5,	-0.25,
		-0.45,	-0.22,
		-0.65,	-0.33,
		-0.4,	-0.2,
		-0.2,	-0.1,
		-0.45,	0,
		-0.4,	0.13,
		-0.4,	0.13,
		-0.4,	0.13,
		-0.4,	0.13,
		-0.4,	0.13 };

	return interp2l( (double*)fi0, 2, (double*)al0, 20, (double*)mywy, fi, al );
}

// ################## m_z #######################
double Calculator::mz_al_fi( double al, double fi ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double fi0[7] = {-30, -28, -24, -20, -16, -12, 0};
	static double mz[182] = {
		0.1643,  0.1568,  0.1346,  0.1154,  0.0890,  0.0634, -0.0181,
		0.1651,  0.1585,  0.1405,  0.1173,  0.0920,  0.0637, -0.0178,
		0.1649,  0.1580,  0.1387,  0.1160,  0.0905,  0.0625, -0.0184,
		0.1622,  0.1542,  0.1342,  0.1123,  0.0866,  0.0592, -0.0202,
		0.1577,  0.1480,  0.1281,  0.1068,  0.0809,  0.0542, -0.0228,
		0.1529,  0.1417,  0.1215,  0.1005,  0.0750,  0.0488, -0.0255,
		0.1483,  0.1365,  0.1152,  0.0943,  0.0699,  0.0444, -0.0282,
		0.1429,  0.1314,  0.1097,  0.0885,  0.0653,  0.0411, -0.0311,
		0.1351,  0.1243,  0.1039,  0.0826,  0.0605,  0.0374, -0.0350,
		0.1253,  0.1145,  0.0965,  0.0755,  0.0540,  0.0315, -0.0406,
		0.1154,  0.1043,  0.0871,  0.0676,  0.0460,  0.0236, -0.0483,
		0.1068,  0.0963,  0.0779,  0.0601,  0.0379,  0.0148, -0.0592,
		0.1003,  0.0910,  0.0713,  0.0534,  0.0299,  0.0054, -0.0732,
		0.0964,  0.0873,  0.0669,  0.0464,  0.0213, -0.0055, -0.0861,
		0.0947,  0.0849,  0.0630,  0.0393,  0.0128, -0.0155, -0.0921,
		0.0951,  0.0854,  0.0610,  0.0351,  0.0075, -0.0205, -0.0878,
		0.0984,  0.0890,  0.0634,  0.0369,  0.0076, -0.0202, -0.0772,
		0.0996,  0.0885,  0.0639,  0.0379,  0.0089, -0.0202, -0.0711,
		0.0870,  0.0721,  0.0490,  0.0217, -0.0025, -0.0315, -0.0823,
		0.0553,  0.0371,  0.0137, -0.0182, -0.0375, -0.0632, -0.1122,
		0.0119, -0.0071, -0.0318, -0.0671, -0.0877, -0.1097, -0.1397,
		-0.0293, -0.0455, -0.0721, -0.1044, -0.1309, -0.1525, -0.1433,
		-0.0540, -0.0654, -0.0979, -0.1255, -0.1554, -0.1813, -0.1356,
		-0.0624, -0.0704, -0.1087, -0.1388, -0.1667, -0.1988, -0.1461,
		-0.0668, -0.0731, -0.1109, -0.1483, -0.1740, -0.2075, -0.1754,
		-0.0713, -0.0777, -0.1124, -0.1512, -0.1784, -0.2089, -0.1950 };
		
	return interp2l( (double*)fi0, 7, (double*)al0, 26, (double*)mz, fi, al);
}

double Calculator::dmz_al_be( double al, double be ) {
	static double al0[26] = {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
	static double be0[11] = {-20, -16, -12, -8, -4, 0, 4, 8, 12, 16, 20};
	static double dmz[286] = {
		-0.0016, -0.0058, -0.0094, -0.0047, -0.0006, 0, -0.0033, -0.0054, -0.0053, -0.0034,  0.0011,
		-0.0019, -0.0058, -0.0052, -0.0034, -0.0005, 0, -0.0018, -0.0039, -0.0041, -0.0036,  0.0001,
		-0.0005, -0.0032, -0.0021, -0.0018, -0.0004, 0, -0.0016, -0.0023, -0.0013, -0.0012,  0.0006,
		 0.0017,  0.0003,  0.0011,       0,       0, 0, -0.0014, -0.0009,  0.0014,  0.0021,  0.0026,
		 0.0034,   0.002,  0.0031,  0.0022,   0.001, 0, -0.0006,  0.0005,  0.0024,  0.0038,  0.0053,
		 0.0048,  0.0007,  0.0019,  0.0039,  0.0024, 0,  0.0006,  0.0012,  0.0001,  0.0022,  0.0072,
		 0.0051, -0.0026, -0.0027,  0.0019,  0.0032, 0,  0.0009, -0.0007, -0.0046, -0.0019,  0.0069,
		 0.0022, -0.0069, -0.0078, -0.0034,  0.0025, 0, -0.0003, -0.0052, -0.0094, -0.0071,  0.0039,
		-0.0027, -0.0099, -0.0095, -0.0063,  0.0012, 0, -0.0012, -0.0077, -0.0116, -0.0107,  0.0006,
		-0.0037, -0.0085, -0.0059, -0.0023,  0.0012, 0,  0.0003, -0.0041, -0.0092, -0.0098, -0.0014,
		 0.0017, -0.0011,  0.0019,   0.005,  0.0025, 0,  0.0028,  0.0032, -0.0013, -0.0032, -0.0032,
		 0.0122,  0.0122,  0.0116,  0.0112,  0.0041, 0,   0.005,  0.0099,  0.0109,  0.0095, -0.0008,
		 0.0269,  0.0278,  0.0216,  0.0159,   0.006, 0,  0.0072,  0.0151,  0.0237,  0.0261,  0.0128,
		 0.0407,  0.0393,  0.0288,  0.0186,  0.0071, 0,  0.0088,  0.0191,  0.0312,  0.0396,  0.0307,
		  0.042,  0.0407,  0.0291,  0.0173,  0.0064, 0,  0.0075,  0.0196,  0.0298,    0.04,  0.0341,
		 0.0247,  0.0268,  0.0196,  0.0105,   0.003, 0,  0.0022,  0.0132,   0.019,   0.021,  0.0151,
		-0.0019,  0.0009,  0.0011, -0.0012, -0.0019, 0, -0.0047,  0.0002, -0.0004,  -0.009, -0.0111,
		-0.0205, -0.0202, -0.0212, -0.0143, -0.0052, 0,  -0.009, -0.0157, -0.0235,   -0.03, -0.0261,
		-0.0193, -0.0185, -0.0303, -0.0183, -0.0037, 0, -0.0093, -0.0265, -0.0347, -0.0263, -0.0225,
		-0.0015,  0.0037, -0.0128, -0.0066,  0.0028, 0, -0.0076, -0.0206, -0.0208, -0.0031, -0.0039,
		 0.0112,  0.0208,  0.0106,  0.0067,  0.0032, 0,  -0.008, -0.0044,  0.0012,  0.0134,    0.01,
		 0.0039,  0.0144,  0.0105,  0.0036, -0.0088, 0, -0.0147, -0.0042,  0.0037,  0.0057,  0.0006,
		-0.0046,  0.0026, -0.0014, -0.0079, -0.0122, 0, -0.0208, -0.0223, -0.0054, -0.0082, -0.0164,
		 0.0115,  0.0143,  0.0012, -0.0082,  0.0084, 0, -0.0128, -0.0235, -0.0029,  0.0022, -0.0108,
		  0.042,  0.0415,   0.014,  0.0032,   0.028, 0,  0.0013,  0.0019,  0.0073,  0.0331,  0.0114,
		 0.0515,  0.0455,  0.0167,  0.0085,  0.0192, 0,  0.0005,   0.014,  0.0079,  0.0464,  0.0168 };
	return interp2l( (double*)be0, 11, (double*)al0, 26, (double*)dmz, be, al);
}

double Calculator::mzwz_al( double al ) {
	static double al0[20] = {-5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90};
	static double mzwz[20] = {-4.4, -3.6, -3.2, -3.9, -4.8, -4.6, -4, -6.1, -5, -7.7, -8.5, -9, -7, -7, -5.7, -6.2, -6.2, -6.2, -6.2, -6.2};
		
	return interp1l(al0, mzwz, al);
}

double Calculator::interp1l( double* x, int xNum, double* y, int yNum, double xi ) {
	int k;

	if( xi <= x[0] )
		return y[0];
	if( xi >= x[xNum-1] )
		return y[yNum-1];

	for( k=0; k<xNum; k++ ) {
		if( xi >= x[k] && xi < x[k+1] )
			break;
	}

	return y[k] + (xi-x[k])/(x[k+1]-x[k])*(y[k+1]-y[k]);
}

double Calculator::interp1l( double x[20], double y[20], double xi ) {
	int k;

	if( xi <= x[0] )
		return y[0];
	if( xi >= x[19] )
		return y[19];

	for( k=0; k<20; k++ ) {
		if( xi >= x[k] && xi < x[k+1] )
			break;
	}

	return y[k] + (xi-x[k])/(x[k+1]-x[k])*(y[k+1]-y[k]);
}

#define	MAT(m,n,i,j)  (*((m)+(i)*(n)+(j)))

double Calculator::interp2l( double* x, int xNum, double* y, int yNum, double* z, double xi, double yi ) {
	int k1,k2;
	//MAT(z, xNum, , );

	if( xi <= x[0] || xi >= x[xNum-1] ) {
		if( xi <= x[0] )
			k1 = 0;
		if( xi >= x[xNum-1] )
			k1 = xNum-1;

		if( yi <= y[0] )
			return MAT(z, xNum, 0, k1);
		if( yi >= y[yNum-1] )
			return MAT(z, xNum, yNum-1, k1 );

		for( k2=0; k2<yNum; k2++ ) {
			if( yi >= y[k2] && yi < y[k2+1] )
				break;
		}

		return MAT(z, xNum, k2, k1) + (yi-y[k2])/(y[k2+1]-y[k2])*(MAT(z, xNum, k2+1, k1)-MAT(z, xNum, k2, k1));
	}

	if( yi <= y[0] || yi >= y[yNum-1] ) {
		if( yi <= y[0] )
			k2 = 0;
		if( yi >= y[yNum-1] )
			k2 = yNum-1;

		if( xi <= x[0] )
			return MAT(z, xNum, k2, 0);
		if( xi >= x[xNum-1] )
			return MAT(z, xNum, k2, xNum-1);

		for( k1=0; k1<xNum; k1++ ) {
			if( xi >= x[k1] && xi < x[k1+1] )
				break;
		}

		return MAT(z, xNum, k2, k1) + (xi-x[k1])/(x[k1+1]-x[k1])*(MAT(z, xNum, k2, k1+1)-MAT(z, xNum, k2, k1));
	}

	for( k1=0; k1<xNum; k1++ ) {
		if( xi >= x[k1] && xi <= x[k1+1] )
			break;
	}
	for( k2=0; k2<yNum; k2++ ) {
		if( yi >= y[k2] && yi <= y[k2+1] )
			break;
	}

	double s1 = (xi-x[k1])/(x[k1+1]-x[k1]);
	double s2 = (yi-y[k2])/(y[k2+1]-y[k2]);
	double z1  = MAT(z, xNum, k2, k1)+(MAT(z, xNum, k2, k1+1)-MAT(z, xNum, k2, k1))*s1;
	double z2  = MAT(z, xNum, k2+1, k1)+(MAT(z, xNum, k2+1, k1+1)-MAT(z, xNum, k2+1, k1))*s1;
	return z1 + (z2-z1)*s2;
}


